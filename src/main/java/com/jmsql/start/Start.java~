package com.jmsql.start;

import java.io.PrintWriter;
import java.util.LinkedList;
import java.util.List;
import java.util.Scanner;

import org.apache.commons.cli.CommandLine;
import org.apache.commons.cli.ParseException;

import com.jmsql.starter.CLIOptionsUtils;
import com.jmsql.utils.db.DbUtils;
import com.jmsql.utils.db.MetadataProcessor;

import jline.console.ConsoleReader;
import jline.console.completer.Completer;
import jline.console.completer.FileNameCompleter;
import jline.console.completer.StringsCompleter;

public class Start {

    private static void databaseInit(String[] args) {
        commandLineArgumentsProcessing(args);
        MetadataProcessor.init();
    }
    private static void commandLineArgumentsProcessing(String[] args) {
        CLIOptionsUtils.createOptions();
        CommandLine commandLine = null;
        try {
            commandLine = CLIOptionsUtils.parseCLIArgs(args);
        } catch (ParseException e1) {
            commandLine = null;
            System.out.println("Error while parsing command Line arguments...Use -help argument for help");
        }
        if (null != commandLine && commandLine.hasOption("help")) {
            CLIOptionsUtils.outputCommandLineHelp(CLIOptionsUtils.options);
            System.exit(1);
        }
        Scanner scanner = new Scanner(System.in);
        String username = null;
        if (null != commandLine && commandLine.hasOption("u")) {
            username = commandLine.getOptionValue("u");
        } else {
            System.out.println("Please input the username");
            username = scanner.next();
        }
        if (username != null && !"".equals(username)) {
            DbUtils.setUsername(username);
        } else {
            System.out.println("Username can not be empty");
            System.exit(2);
        }
        String ip = null;
        if (null != commandLine && commandLine.hasOption("h")) {
            ip = commandLine.getOptionValue("h");
        }
        if (ip==null || "".equals(ip)) {
            ip = "127.0.0.1";
        }
        DbUtils.setDbIp(ip);
        String password = null;
        if (null != commandLine && commandLine.hasOption("p")) {
            password = commandLine.getOptionValue("p");
        } else {
            System.out.println("Please enter your password");
            password = getPasswordByTerminal();
        }
        if (password != null && !"".equals(password)) {
            DbUtils.setPassword(password);
        } else {
            System.out.println("Password can not be empty");
            System.exit(4);
        }
        String dbName = null;
        if (null != commandLine && commandLine.hasOption("d")) {
            dbName = commandLine.getOptionValue("d");
        } else {
            System.out.println("Please input the db name");
            dbName = scanner.next();
        }
        if (dbName != null && !"".equals(dbName)) {
            DbUtils.setDbName(dbName);
        } else {
            System.out.println("db name can not be empty");
            System.exit(5);
        }
        String port = null;
        if (null != commandLine && commandLine.hasOption("P")) {
            port = commandLine.getOptionValue("P");
        }
        if (port == null || "".equals(port)) {
            port = "3306";
        }
        DbUtils.setDbPort(port);
        DbUtils.init();
    }
    public static void main(String[] args) {
        System.out.println("Welcome to Jmsql :)");
        try {
            
            Character mask = null;
            String trigger = null;

            ConsoleReader reader = new ConsoleReader();

            reader.setPrompt("prop> ");

            if ((args == null) || (args.length == 0)) {
                System.out.println("hello world");
                return;
            }

            List<Completer> completors = new LinkedList<Completer>();

            if (args.length > 0) {
                if (args[0].equals("none")) {
                }
                else if (args[0].equals("files")) {
                    completors.add(new FileNameCompleter());
                }
                else if (args[0].equals("simple")) {
                    completors.add(new StringsCompleter("foo", "bar", "baz"));
                }else {
                    System.out.println("hello world");
                    return;
                }
            }

            if (args.length == 3) {
                mask = args[2].charAt(0);
                trigger = args[1];
            }

            for (Completer c : completors) {
                reader.addCompleter(c);
            }

            String line;
            PrintWriter out = new PrintWriter(reader.getOutput());

            while ((line = reader.readLine()) != null) {
                out.println("======>\"" + line + "\"");
                out.flush();

                // If we input the special word then we will mask
                // the next line.
                if ((trigger != null) && (line.compareTo(trigger) == 0)) {
                    line = reader.readLine("password> ", mask);
                }
                if (line.equalsIgnoreCase("quit") || line.equalsIgnoreCase("exit")) {
                    break;
                }
                if (line.equalsIgnoreCase("cls")) {
                    reader.clearScreen();
                }
            }
        }
        catch (Throwable t) {
            t.printStackTrace();
        }
    }
}
